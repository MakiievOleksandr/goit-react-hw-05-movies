{"version":3,"file":"static/js/936.9c999f16.chunk.js","mappings":"+PAoCA,EAhCiB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QAClB,GAA8BC,EAAAA,EAAAA,UAAS,CAAC,GAAxC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,EAA4BF,EAA5BE,SAAUC,EAAkBH,EAAlBG,eAElBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,gHAEEC,EAAAA,EAAAA,MAFF,gBAEfC,EAFe,EAEfA,OACRN,EAAWM,GAHY,gDAKvBC,QAAQC,IAAI,KAAMC,SALK,qGAAH,qDASxBL,GACD,GAAE,IAEH,IAAMM,EAAO,WACX,GAAI,OAACR,QAAD,IAACA,GAAAA,EAAeS,OAGpB,OAAOT,EAAc,EACtB,EAED,OAAOL,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACjB,2BACE,gBAAKC,IAAG,UAAKhB,GAAL,OAAgBS,KAAhB,OAAyBM,GAAgBE,IAAKH,KACtD,wBAAKA,KACL,uCAAeD,OAHRD,EADQ,GAOpB,ECHD,EAzBa,WACX,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BrB,EAAAA,EAAAA,UAAS,IAAvC,eAAOD,EAAP,KAAgBwB,EAAhB,KAcA,OAZAlB,EAAAA,EAAAA,YAAU,WACR,IAAMmB,EAAc,mCAAG,gHAEIC,EAAAA,EAAAA,IAAaJ,GAFjB,gBAEXK,EAFW,EAEXA,KACRH,EAAWG,EAAKC,OAAO,EAAG,IAHP,gDAKnBlB,QAAQC,IAAI,KAAMC,SALC,yDAAH,qDAQpBa,GACD,GAAE,CAACH,KAGF,4BACE,kCACA,yBACE,SAAC,EAAD,CAAUtB,QAASA,QAI1B,C,8MC7BK6B,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,KAAM,KAIGC,EAAe,mCAAG,WAAMC,GAAN,yFACNP,EAASQ,IAAT,iBAAuBD,IADjB,uBACrBE,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfC,EAAe,mCAAG,WAAMvB,GAAN,yFACNa,EAASQ,IAAT,iBAAuBrB,IADjB,uBACrBsB,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAIf9B,EAAiB,mCAAG,sGACRqB,EAASQ,IAAT,kBADQ,uBACvBC,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAIjBZ,EAAY,mCAAG,WAAMV,GAAN,yFACHa,EAASQ,IAAT,iBAAuBrB,EAAvB,aADG,uBAClBsB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAIZE,EAAS,mCAAG,WAAMJ,GAAN,yFACAP,EAASQ,IAAT,gBAA8B,CACnDL,OAAQ,CACNI,MAAOA,KAHY,uBACfE,EADe,EACfA,KADe,kBAMhBA,GANgB,2CAAH,sDASTG,EAAU,mCAAG,WAAMzB,GAAN,yFACDa,EAASQ,IAAT,iBAAuBrB,EAAvB,aADC,uBAChBsB,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,qD","sources":["components/module/Cast/CastList.jsx","components/module/Cast/Cast.jsx","components/shared/services/movies-api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { getImagesSettings } from 'components/shared/services/movies-api';\n\nconst CastList = ({ credits }) => {\n  const [profile, setProfile] = useState({});\n  const { base_url, profile_sizes } = profile;\n\n  useEffect(() => {\n    const fetchImageSettings = async () => {\n      try {\n        const { images } = await getImagesSettings();\n        setProfile(images);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n      }\n    };\n    fetchImageSettings();\n  }, []);\n\n  const size = () => {\n    if (!profile_sizes?.length) {\n      return;\n    }\n    return profile_sizes[1];\n  };\n\n  return credits.map(({ id, character, name, profile_path }) => (\n    <li key={id}>\n      <img src={`${base_url}${size()}${profile_path}`} alt={name} />\n      <h4>{name}</h4>\n      <p>Character: {character}</p>\n    </li>\n  ));\n};\nexport default CastList;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport CastList from './CastList';\n\nimport { getMovieCast } from 'components/shared/services/movies-api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        const { cast } = await getMovieCast(movieId);\n        setCredits(cast.splice(0, 9));\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]); //dependencies\n\n  return (\n    <div>\n      <h1>CAST</h1>\n      <ul>\n        <CastList credits={credits} />\n      </ul>\n    </div>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '2fc9cddb581d13f9fbb06828f41e996e',\n    page: 1,\n  },\n});\n\nexport const getPopularMovie = async query => {\n  const { data } = await instance.get(`/movie/${query}`);\n  return data;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\nexport const getImagesSettings = async () => {\n  const { data } = await instance.get(`/configuration`);\n  return data;\n};\nexport const getMovieCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\nexport const getMovies = async query => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query: query,\n    },\n  });\n  return data;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n"],"names":["credits","useState","profile","setProfile","base_url","profile_sizes","useEffect","fetchImageSettings","getImagesSettings","images","console","log","message","size","length","map","id","character","name","profile_path","src","alt","movieId","useParams","setCredits","fetchMovieCast","getMovieCast","cast","splice","instance","axios","baseURL","params","api_key","page","getPopularMovie","query","get","data","getMovieDetails","getMovies","getReviews"],"sourceRoot":""}