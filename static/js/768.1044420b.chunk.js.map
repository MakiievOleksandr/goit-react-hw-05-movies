{"version":3,"file":"static/js/768.1044420b.chunk.js","mappings":"8TAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,KAAM,KAIGC,EAAe,mCAAG,WAAMC,GAAN,yFACNP,EAASQ,IAAT,iBAAuBD,IADjB,uBACrBE,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfC,EAAe,mCAAG,WAAMC,GAAN,yFACNX,EAASQ,IAAT,iBAAuBG,IADjB,uBACrBF,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAIfG,EAAiB,mCAAG,sGACRZ,EAASQ,IAAT,kBADQ,uBACvBC,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAIjBI,EAAY,mCAAG,WAAMF,GAAN,yFACHX,EAASQ,IAAT,iBAAuBG,EAAvB,aADG,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAIZK,EAAS,mCAAG,WAAMP,GAAN,yFACAP,EAASQ,IAAT,gBAA8B,CACnDL,OAAQ,CACNI,MAAOA,KAHY,uBACfE,EADe,EACfA,KADe,kBAMhBA,GANgB,2CAAH,sDASTM,EAAU,mCAAG,WAAMJ,GAAN,yFACDX,EAASQ,IAAT,iBAAuBG,EAAvB,aADC,uBAChBF,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,qD,8ICJvB,EA7BwB,SAAC,GAAkB,IAAhBO,EAAe,EAAfA,SACzB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAYA,OACE,kBAAMH,SANa,SAAAI,GACnBA,EAAIC,iBACJL,EAASE,GACTC,EAAS,GACV,EAEC,WACE,4BACE,kBACEG,SAda,SAAC,GAAgB,IAC5BC,EAD2B,EAAbC,OACdD,MACRJ,EAASI,EACV,EAYOE,aAAa,MACbC,KAAK,OACLC,KAAK,SACLJ,MAAOL,OAGX,mBAAQQ,KAAK,SAAb,sBAGL,E,SCoBD,EA3CmB,WACjB,OAA4BT,EAAAA,EAAAA,UAAS,IAArC,eAAOW,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAASF,EAAavB,IAAI,SAC1B0B,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAKH,EAAL,CAIA,IAAMI,EAAW,mCAAG,gHAEUvB,EAAAA,EAAAA,IAAUmB,GAFpB,gBAERK,EAFQ,EAERA,QACRT,EAAUS,GAHM,gDAKhBC,QAAQC,IAAI,KAAMC,SALF,yDAAH,qDASjBJ,GAXC,CAYF,GAAE,CAACJ,IAMJ,OACE,iCACE,SAAC,EAAD,CAAiBjB,SANA,SAAAT,GACnByB,EAAgB,CAAEzB,MAAAA,GACnB,KAKG,wBACGqB,EAAOc,KAAI,gBAAGC,EAAH,EAAGA,MAAOhC,EAAV,EAAUA,GAAV,OACV,yBACE,SAAC,KAAD,CAAMiC,GAAE,kBAAajC,GAAMO,MAAO,CAAE2B,KAAMX,GAA1C,SACGS,KAFIhC,EADC,QAUnB,C","sources":["components/shared/services/movies-api.js","components/module/SearchMovieForm/SearchMovieForm.jsx","pages/MoviePage/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '2fc9cddb581d13f9fbb06828f41e996e',\n    page: 1,\n  },\n});\n\nexport const getPopularMovie = async query => {\n  const { data } = await instance.get(`/movie/${query}`);\n  return data;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\nexport const getImagesSettings = async () => {\n  const { data } = await instance.get(`/configuration`);\n  return data;\n};\nexport const getMovieCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\nexport const getMovies = async query => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query: query,\n    },\n  });\n  return data;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchMovieForm = ({ onSubmit }) => {\n  const [state, setState] = useState('');\n\n  const handleChange = ({ target }) => {\n    const { value } = target;\n    setState(value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    onSubmit(state);\n    setState('');\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <input\n          onChange={handleChange}\n          autoComplete=\"off\"\n          type=\"text\"\n          name=\"search\"\n          value={state}\n        />\n      </label>\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default SearchMovieForm;\n\nSearchMovieForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\n\nimport SearchMovieForm from 'components/module/SearchMovieForm/SearchMovieForm';\n\nimport { getMovies } from 'components/shared/services/movies-api';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!search) {\n      return;\n    }\n\n    const fetchMovies = async () => {\n      try {\n        const { results } = await getMovies(search);\n        setMovies(results);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n\n    fetchMovies();\n  }, [search]);\n\n  const handleSubmit = query => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <>\n      <SearchMovieForm onSubmit={handleSubmit} />\n      <ul>\n        {movies.map(({ title, id }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default MoviesPage;\n\n"],"names":["instance","axios","baseURL","params","api_key","page","getPopularMovie","query","get","data","getMovieDetails","id","getImagesSettings","getMovieCast","getMovies","getReviews","onSubmit","useState","state","setState","evt","preventDefault","onChange","value","target","autoComplete","type","name","movies","setMovies","useSearchParams","searchParams","setSearchParams","search","location","useLocation","useEffect","fetchMovies","results","console","log","message","map","title","to","from"],"sourceRoot":""}